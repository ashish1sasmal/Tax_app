# Generated by Django 2.2.3 on 2019-08-16 04:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tax', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssetPortfolio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_assets', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('debt_pc', models.FloatField(default=0)),
                ('equity_pc', models.FloatField(default=0)),
                ('cash_pc', models.FloatField(default=0)),
                ('other_pc', models.FloatField(default=0)),
                ('debt_aaa_pc', models.FloatField(default=0)),
                ('debt_aa_pc', models.FloatField(default=0)),
                ('debt_a_pc', models.FloatField(default=0)),
                ('debt_bbb_pc', models.FloatField(default=0)),
                ('debt_bb_pc', models.FloatField(default=0)),
                ('debt_b_pc', models.FloatField(default=0)),
                ('debt_belowb_pc', models.FloatField(default=0)),
                ('debt_unrated_pc', models.FloatField(default=0)),
                ('equity_giant_pc', models.FloatField(default=0)),
                ('equity_large_pc', models.FloatField(default=0)),
                ('equity_medium_pc', models.FloatField(default=0)),
                ('equity_small_pc', models.FloatField(default=0)),
                ('equity_micro_pc', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='BenchmarkIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('avg_return', models.FloatField(null=True)),
                ('min_return', models.FloatField(null=True)),
                ('max_return', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DebtAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('interest_rate', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('debt_type', models.CharField(blank=True, max_length=50)),
                ('credit_rating', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'unique_together': {('name', 'expiry_date', 'interest_rate')},
            },
        ),
        migrations.CreateModel(
            name='DebtPortfolio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField(null=True, validators=[django.core.validators.MaxValueValidator(100.0)])),
                ('for_date', models.DateField(blank=True, null=True)),
                ('debt_asset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tax.DebtAsset')),
            ],
        ),
        migrations.CreateModel(
            name='EquityAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('market_cap', models.FloatField(blank=True, null=True)),
                ('cap_type', models.CharField(blank=True, max_length=50)),
                ('equity_sector', models.CharField(blank=True, max_length=50)),
                ('dividend_history', models.CharField(blank=True, max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='EquityAssetIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('benchmark_index', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tax.BenchmarkIndex')),
                ('equity_asset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tax.EquityAsset')),
            ],
        ),
        migrations.CreateModel(
            name='EquityPortfolio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField(null=True, validators=[django.core.validators.MaxValueValidator(100.0)])),
                ('for_date', models.DateField(blank=True, null=True)),
                ('equity_asset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tax.EquityAsset')),
            ],
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='FundBenchmarkIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('benchmark_index', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tax.BenchmarkIndex')),
            ],
        ),
        migrations.CreateModel(
            name='FundCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, unique=True)),
                ('num_funds', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FundHouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amc_code', models.CharField(max_length=3, verbose_name='AMC Code')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('launch_date', models.DateField(blank=True, null=True)),
                ('total_aum', models.FloatField(blank=True, null=True)),
                ('rank_aum', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('rank_fund_ratings', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('address', models.CharField(blank=True, max_length=500)),
                ('email', models.EmailField(blank=True, max_length=50)),
                ('website', models.URLField(blank=True, max_length=50)),
                ('phone', models.CharField(blank=True, max_length=100)),
                ('fax', models.CharField(blank=True, max_length=100)),
                ('bse_open', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FundManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('education', models.CharField(blank=True, max_length=200)),
                ('experience', models.CharField(blank=True, max_length=500)),
                ('scheme_history', models.TextField(blank=True)),
                ('date_history', models.TextField(blank=True)),
                ('num_fund_ratings', models.IntegerField(null=True)),
                ('avg_fund_ratings', models.FloatField(null=True)),
                ('rank_fund_ratings', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='FundManagerHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tax.FundManager')),
            ],
        ),
        migrations.CreateModel(
            name='FundScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('objective', models.CharField(blank=True, max_length=1000)),
                ('aum', models.FloatField(blank=True, null=True)),
                ('aum_date', models.DateField(blank=True, null=True)),
                ('category_vro', models.CharField(blank=True, max_length=50)),
                ('category_ms', models.CharField(blank=True, max_length=50)),
                ('category_crisil', models.CharField(blank=True, max_length=50)),
                ('inv_style_debt_vro', models.CharField(blank=True, max_length=50)),
                ('inv_style_equity_vro', models.CharField(blank=True, max_length=50)),
                ('inv_style_debt_ms', models.CharField(blank=True, max_length=50)),
                ('inv_style_equity_ms', models.CharField(blank=True, max_length=50)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('fund_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fund_category_list', to='tax.FundCategory')),
                ('fund_house', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fund_house_list', to='tax.FundHouse')),
            ],
        ),
        migrations.CreateModel(
            name='RTA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rta_name', models.CharField(blank=True, max_length=100, unique=True)),
                ('rta_address', models.CharField(blank=True, max_length=500)),
                ('rta_email', models.EmailField(blank=True, max_length=50)),
                ('rta_website', models.URLField(blank=True, max_length=50)),
                ('rta_phone', models.CharField(blank=True, max_length=100)),
                ('rta_fax', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SchemePlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('bse_code', models.CharField(blank=True, max_length=15)),
                ('rta_code', models.CharField(blank=True, max_length=10)),
                ('amc_code', models.CharField(blank=True, max_length=10)),
                ('isin', models.CharField(blank=True, max_length=15)),
                ('if_direct', models.NullBooleanField(default=False)),
                ('if_growth', models.NullBooleanField(default=False)),
                ('if_open', models.NullBooleanField(default=True)),
                ('launch_date', models.DateField(blank=True, null=True)),
                ('asset_size', models.FloatField(blank=True, null=True)),
                ('asset_size_date', models.DateField(blank=True, null=True)),
                ('expense_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('expense_ratio_date', models.DateField(blank=True, null=True)),
                ('nav_latest', models.FloatField(blank=True, null=True)),
                ('nav_latest_date', models.DateField(blank=True, null=True)),
                ('dividend_history', models.CharField(blank=True, max_length=1000)),
                ('rating_crisil', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rating_vro', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rating_ms', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('riskometer_crisil', models.CharField(blank=True, max_length=50)),
                ('risk_grade_vro', models.CharField(blank=True, max_length=50)),
                ('return_grade_vro', models.CharField(blank=True, max_length=50)),
                ('rating_average', models.FloatField(blank=True, default=0, null=True)),
                ('rating_rank', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('aum_rank', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('avg_return', models.FloatField(null=True)),
                ('min_return', models.FloatField(null=True)),
                ('max_return', models.FloatField(null=True)),
                ('min_inv', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_addl_inv', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_sip_inv', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_sip_inst', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_wit', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_sip_wit', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_swp_wit', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_bal', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('if_sip', models.BooleanField(default=False)),
                ('sip_start_dates', models.CharField(blank=True, max_length=200)),
                ('exit_load', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('exit_load_comment', models.CharField(blank=True, max_length=200)),
                ('code_ms', models.CharField(blank=True, max_length=20)),
                ('code_vro', models.CharField(blank=True, max_length=20)),
                ('name_crisil', models.CharField(blank=True, max_length=200)),
                ('name_ms', models.CharField(blank=True, max_length=200)),
                ('name_vro', models.CharField(blank=True, max_length=200)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('fund_scheme', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='scheme_plan_list', to='tax.FundScheme')),
            ],
        ),
        migrations.CreateModel(
            name='SchemePlanHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starting_date', models.DateField()),
                ('rating_crisil', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rating_vro', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rating_ms', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('aum', models.FloatField(blank=True, null=True)),
                ('expense_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_return', models.FloatField(null=True)),
                ('min_return', models.FloatField(null=True)),
                ('max_return', models.FloatField(null=True)),
                ('std_dev', models.FloatField(blank=True, null=True)),
                ('sortino_ratio', models.FloatField(blank=True, null=True)),
                ('alpha', models.FloatField(blank=True, null=True)),
                ('beta', models.FloatField(blank=True, null=True)),
                ('sharpe_ratio', models.FloatField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('scheme', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='scheme_plan_history', to='tax.SchemePlan')),
            ],
        ),
        migrations.DeleteModel(
            name='userprofile',
        ),
        migrations.AddField(
            model_name='fundmanagerhistory',
            name='scheme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fund_manager_list', to='tax.FundScheme'),
        ),
        migrations.AddField(
            model_name='fundhouse',
            name='rta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tax.RTA'),
        ),
        migrations.AddField(
            model_name='fundbenchmarkindex',
            name='fund_scheme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fund_benchmark_list', to='tax.FundScheme'),
        ),
        migrations.AddField(
            model_name='equityportfolio',
            name='fund_scheme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tax.FundScheme'),
        ),
        migrations.AddField(
            model_name='debtportfolio',
            name='fund_scheme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tax.FundScheme'),
        ),
        migrations.AddField(
            model_name='benchmarkindex',
            name='exchange',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tax.Exchange'),
        ),
        migrations.AddField(
            model_name='assetportfolio',
            name='benchmark_index',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tax.BenchmarkIndex'),
        ),
        migrations.AddField(
            model_name='assetportfolio',
            name='fund_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tax.FundCategory'),
        ),
        migrations.AddField(
            model_name='assetportfolio',
            name='fund_scheme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tax.FundScheme'),
        ),
        migrations.AlterUniqueTogether(
            name='fundmanagerhistory',
            unique_together={('manager', 'scheme')},
        ),
        migrations.AlterUniqueTogether(
            name='fundbenchmarkindex',
            unique_together={('fund_scheme', 'benchmark_index')},
        ),
        migrations.AlterUniqueTogether(
            name='equityportfolio',
            unique_together={('fund_scheme', 'equity_asset')},
        ),
        migrations.AlterUniqueTogether(
            name='debtportfolio',
            unique_together={('fund_scheme', 'debt_asset')},
        ),
    ]
